{"version":3,"sources":["../src/index.js"],"names":["Promise","connect","db","connection","set","on","console","error","bind","once","log","JSON_LOCATION","__dirname","GOOGLE","regex","regex2","options","provider","apiKey","geocoder","stores","loadJsonFile","storesToCheck","fetching","array","length","writeFileSync","JSON","stringify","map","address","store","name","geocode","newStore","save","err","result","close","process","exit","all","promiseFactory","p","catch","e","then","OK","data","filter","x","type","s","index","payload","pristine","resolve","reject","pushThePromise","promises","push","json","parse","readFileSync","reduce","prev","val","Address","replace","Name"],"mappings":"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","file":"index.js","sourcesContent":["/*eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"log\"] }] */\nimport fs from 'fs'\nimport _ from 'lodash'\nimport NodeGeocoder from 'node-geocoder'\nimport mongoose from 'mongoose'\nimport Location from './locations.model'\n\nmongoose.Promise = Promise\nmongoose.connect('mongodb://localhost/generation')\n\nlet db = mongoose.connection;\n\n// Setting up the debug flag:\nmongoose.set('debug, true');\n// Logging connection:\ndb\n  .on('error', console.error.bind(console, 'DB connection error.'))\n  .once('open', console.log.bind(console, 'DB Connection established.'));\n\n\n\nconst JSON_LOCATION = `${__dirname}/../src/`\nconst GOOGLE = 'AIzaSyDM_SxLW5I5q2yZGmyNzqk3ain_FuybRJA\t'\nconst regex = /( (DELE)\\w.* | (C.P.) | (C.P) | (CP.) | (CP) | (ENTRE) | (ESQ)\\W.* ).*/gi\nconst regex2 = /(c.p.).*/gi\nconst options = {\n\tprovider: 'google',\n\tapiKey: GOOGLE\n};\n\nlet geocoder = NodeGeocoder(options);\n\nlet stores = loadJsonFile()\nstores = stores//.slice(0,1)\n\nlet storesToCheck = [...stores]\n\nfetching(storesToCheck)\n\nfunction fetching(array) {\n\tif (array.length === 0) {\n\t\tfs.writeFileSync(JSON_LOCATION + 'result2.txt', JSON.stringify(stores))\n\t\tconsole.log('*************************************');\n\t\tstores.map(store => {\n\t\t\tlet {address, name, geocode} = store\n\t\t\tlet newStore = new Location({address, name, geocode})\n\t\t\tconsole.log('New location saved');\n\t\t\t//console.log(newStore);\n\t\t\tnewStore.save((err, result) => {\n\t\t\t\tif(err) {\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t}\n\t\t\t\tconsole.log(result);\n\t\t\t})\n\t\t})\n\t\tconsole.log('storesChecked', stores.length)\n\n        console.log(\"_________Closing Mongo connection_________\");\n        mongoose.connection.close();\n\t\tprocess.exit(0)\n\t}\n\tPromise.all(promiseFactory(array).map(p => p.catch(e => e)))\n\t\t.then(data => {\n\t\t\tconst OK = data.filter(x => x.type === 'OK')\n\t\t\tOK.map(x => {\n\t\t\t\tstores.filter(s=>s.index===x.payload.index)[0].geocode = x.payload.data\n\t\t\t\tarray.filter(s=>s.index===x.payload.index)[0].pristine = false\n\t\t\t\t//storesChecked.push(x.payload.data)\n\t\t\t\t//array.splice(x.payload.index - 1, 1)\n\t\t\t})\n\t\t\tfetching(array.filter(x => x.pristine))\n\t\t\t\n\t\t})\n}\nfunction geocode(address, index) {\n\treturn new Promise((resolve, reject) => {\n\t\tgeocoder.geocode(address)\n\t\t\t.then((data) => {\n\t\t\t\tconsole.log('location acquired');\n\t\t\t\tresolve({ type: 'OK', payload: { data: data[0], index } })\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject({ type: 'Error', payload: { data: null, index  } })\n\t\t\t})\n\t})\n}\nfunction promiseFactory(array) {\n\tlet pushThePromise = (address, index) => {\n\t\tpromises.push(geocode(address, index))\n\t}\n\tlet promises = []\n\tif (array.length) {\n\t\tarray.map(store => {\n\t\t\t//setTimeout(pushThePromise, 250, [store.address, store.index])\n\t\t\tpromises.push(geocode(store.address, store.index))\n\t\t})\n\t\treturn promises\n\t}\n\treturn null\n}\nfunction loadJsonFile() {\n\tconst json = JSON.parse(fs.readFileSync(JSON_LOCATION + 'store_directory.json', 'utf8'))\n\t\t.reduce((prev = [], val, index) => {\n\t\t\tprev.push({\n\t\t\t\taddress: val.Address.replace(regex, '').replace(regex2, ''),\n\t\t\t\tname: val.Name,\n\t\t\t\tindex: index,\n\t\t\t\tpristine: true\n\t\t\t})\n\t\t\treturn prev\n\t\t}, [])\n\treturn json\n\n}\n\n\n\n"]}